% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_mcmc.R
\name{BayesFBHborrow.NoBorrow}
\alias{BayesFBHborrow.NoBorrow}
\title{Run the MCMC sampler without Bayesian Borrowing}
\usage{
\method{BayesFBHborrow}{NoBorrow}(
  data,
  data_hist = NULL,
  initial_parameters,
  hyperparameters = list(a_sigma = 1, b_sigma = 1, Jmax = 5, clam_smooth = 0.8,
    cprop_beta = 0.3, phi = 3, pi_b = 0.5),
  lambda_hyperparameters = list(a_lambda = 0.01, b_lambda = 0.01),
  iter = 150,
  warmup_iter = 10,
  refresh = 0,
  verbose = FALSE,
  max_grid = 2000
)
}
\arguments{
\item{data}{data.frame containing atleast three vectors of "tte" (time-to-event)
and "event" (event indicator), and covariates "X_i" (where i should be a number/
indicator of the covariate)}

\item{data_hist}{NULL (not used)}

\item{initial_parameters}{list containing the initial values of c("J", "s_r",
"mu", "sigma2", "lambda", beta")}

\item{hyperparameters}{list containing the hyperparameters c("a_sigma",
"b_sigma", "Jmax", "clam_smooth", "cprop_beta", "phi", "pi_b"). Default is 
list("a_sigma" = 2, "b_sigma" = 2, "Jmax" = 20, "clam_smooth" = 0.8, 
"cprop_beta" = 0.3, "phi" = 3, "pi_b" = 0.5)}

\item{lambda_hyperparameters}{contains two hyperparameters ("a" and "b") used for
the update of lambda, default is c(0.01, 0.01)}

\item{iter}{number of iterations for MCMC sampler. Default is 2000}

\item{warmup_iter}{number of warmup iterations (burn-in) for MCMC sampler. 
Default is 2000}

\item{refresh}{number of iterations between printed console updates. Default
is 0}

\item{verbose}{TRUE (default), choice of output, if TRUE will output 
intermittent results into console}

\item{max_grid}{grid size for the smoothed baseline hazard. Default is 2000}
}
\value{
list of samples for both fixed (can be found in $out_fixed) and 
multidimensional parameters (lambda, s, tau)
}
\description{
Main function of the BayesFBHborrow package. This generic function 
calls the correct MCMC sampler for time-to-event without Bayesian borrowing.
}
\examples{
set.seed(123)
# Load the example data and write your initial values and hyper parameters
# For this example we want to calculate the Effective Historical Sample Size
# (EHSS), and therefor we need to run the sampler for both with and without
# borrowing.
data(weibull_cc, package = "BayesFBHborrow")
data(weibull_hist, package = "BayesFBHborrow")

# Set your initial values and hyperparameters
s <- c(0, quantile(weibull_cc$tte, c(0.25, 0.75, 1.0), names = FALSE))
group_data_cc <- group_summary(weibull_cc[weibull_cc$X_trt == 0,]$tte, 
                               weibull_cc[weibull_cc$X_trt == 0,]$event, 
                               NULL, s)
group_data_hist <- group_summary(weibull_hist$tte, weibull_hist$event, NULL, s)
lambda_init_cc <- init_lambda_hyperparameters(group_data_cc, s) 
lambda_init_hist <- init_lambda_hyperparameters(group_data_hist, s) 
initial_param <- list("J" = 2, 
                      "s_r" = s[2:3], # split points only (length J) 
                      "mu" = 0, 
                      "sigma2" = 2,
                      "tau" = c( 1, 1, 1),
                      "lambda_0" = mapply(stats::rgamma, n=1, 
                                          shape = lambda_init_hist$shape, 
                                          rate = lambda_init_hist$rate), 
                      "lambda" = mapply(stats::rgamma, n=1, 
                                        shape = lambda_init_cc$shape, 
                                        rate = lambda_init_cc$rate), 
                       "beta_0" = NULL,
                       "beta" = 0)

hyper <-  list("a_tau" = 1, 
               "b_tau" = 0.001,
               "c_tau" = 1,
               "d_tau" = 10, 
               "type" = "mix",
               "p_0" = 0.5, 
               "a_sigma" = 2,
               "b_sigma" = 2,
               "Jmax" = 5, 
               "clam_smooth" = 0.5, 
               "cprop_beta" = 0.3,
               "phi" = 2, 
               "pi_b" = 0.5)
       
initial_param_NB <- list("J" = 2, 
                      "s_r" = s[2:3], # split points only (length J) 
                      "mu" = 0, 
                      "sigma2" = 2,
                      "lambda" = mapply(stats::rgamma, n=1, 
                                        shape = lambda_init_cc$shape, 
                                        rate = lambda_init_cc$rate), 
                       "beta" = 0)

hyper_NB <-  list("a_sigma" = 2,
               "b_sigma" = 2,
               "Jmax" = 5, 
               "clam_smooth" = 0.5, 
               "cprop_beta" = 0.3,
               "phi" = 2, 
               "pi_b" = 0.5)         
                    
output_Noborrowing <- BayesFBHborrow(weibull_cc, NULL, initial_param_NB, hyper_NB,
                iter = 10, warmup_iter = 1)
}
